
    val state: StateFlow<UiState>

        val pagingDataFlow: Flow<PagingData<Image>>

        val accept: (UiAction) -> Unit

        init {
            val initialQuery: String = savedStateHandle[LAST_SEARCH_QUERY] ?: DEFAULT_QUERY
            val lastQueryScrolled: String = savedStateHandle[LAST_QUERY_SCROLLED] ?: DEFAULT_QUERY
            val actionStateFlow = MutableSharedFlow<UiAction>()
            val searches = actionStateFlow
                .filterIsInstance<UiAction.Search>()
                .distinctUntilChanged()
                .onStart { emit(UiAction.Search(query = initialQuery)) }
            val queriesScrolled = actionStateFlow
                .filterIsInstance<UiAction.Scroll>()
                .distinctUntilChanged()
                // This is shared to keep the flow "hot" while caching the last query scrolled,
                // otherwise each flatMapLatest invocation would lose the last query scrolled,
                .shareIn(
                    scope = viewModelScope,
                    started = SharingStarted.WhileSubscribed(stopTimeoutMillis = 5000),
                    replay = 1
                )
                .onStart { emit(UiAction.Scroll(currentQuery = lastQueryScrolled)) }

            pagingDataFlow = searches
                .flatMapLatest { searchRepo.search(query  = it.query) }
                .map { it.map(ImageDto::toImage) }
                .cachedIn(viewModelScope)

            state = combine(
                searches,
                queriesScrolled,
                ::Pair
            ).map { (search, scroll) ->
                UiState(
                    query = search.query,
                    lastQueryScrolled = scroll.currentQuery,
                    // If the search query matches the scroll query, the user has scrolled
                    hasNotScrolledForCurrentSearch = search.query != scroll.currentQuery
                )
            }
                .stateIn(
                    scope = viewModelScope,
                    started = SharingStarted.WhileSubscribed(stopTimeoutMillis = 5000),
                    initialValue = UiState()
                )

            accept = { action ->
                viewModelScope.launch { actionStateFlow.emit(action) }
            }
        }

        override fun onCleared() {
            savedStateHandle[LAST_SEARCH_QUERY] = state.value.query
            savedStateHandle[LAST_QUERY_SCROLLED] = state.value.lastQueryScrolled
            super.onCleared()
        }